#!/usr/bin/php
<?php

namespace Firehed\GitTools;

class Merge {
	private $from = 'master';
	private $avail = array();

	private function avail() {
		$cmd = "git cherry %s";
		$out = $this->exec($cmd, $this->from);
		foreach ($out as $line) {
			list($symbol, $hash) = explode(' ', $line);
			if ($symbol == '+') {
				$this->avail[$hash] = true;
			}
		}
	}

	private function getDescription($hash) {
		$hash = '1e95a417f9f0950cee6370b0aaa987bd9137dc77';
		// Format derived from 'git help show', "format" section
		$format = '%H%n'
			. '%an%n'
			. '%ae%n'
			. '%at%n'
			. '%cn%n'
			. '%ce%n'
			. '%ct%n'
			. '%s%n'
			. '%b';
		$cmd = "git show %s --pretty=format:%s -s";
		$out = $this->exec($cmd, $hash, $format);
		list($hash
		   , $authorName
		   , $authorEmail
		   , $authorTimestamp
		   , $commiterName
		   , $committerEmail
		   , $committerTimestamp
		   , $summary
		   ) = $out;
		$out = array_slice($out, 8);
		$body = implode("\n", $out);

		return (new Commit)
			->setHash($hash)
			->setAuthorName($authorName)
			->setAuthorEmail($authorEmail)
			->setAuthorTimestamp($authorTimestamp)
			->setCommiterName($commiterName)
			->setCommitterEmail($commiterName)
			->setCommitterTimestamp($commiterName)
			->setSummary($summary)
			->setBody($body)
			;
	}


	function __construct() { 
		$this->avail();
		print_r($this->getDescription(end(array_keys($this->avail))));
	}
	
	private function exec($cmd) {
		$args = func_get_args();
		array_shift($args);
		array_walk($args, function(&$v, $k) { $v = escapeshellarg($v); });
		if ($args) {
			$cmd = vsprintf($cmd, $args);
		}
		exec($cmd, $out, $err);
		if ($err) {
			throw new \Exception(sprintf("Command %s failed with result %s", $cmd, print_r($out, true)), $err);
		}
		return $out;
	}

}

class Commit {
	private $Hash;
	private $AuthorName;
	private $AuthorEmail;
	private $AuthorTimestamp;
	private $CommiterName;
	private $CommitterEmail;
	private $CommitterTimestamp;
	private $Summary;
	private $Body;
	
	public function __construct() {
		// no-op
	}

	public function __call($fn, $args) {
		switch (strtolower(substr($fn, 0, 3))) {
		case 'get':
			$key = substr($fn, 3);
			if (property_exists($this, $key)) {
				return $this->key;
			}
			break;
		case 'set':
			$key = substr($fn, 3);
			if (property_exists($this, $key)) {
				$this->$key = $args[0];
				return $this;
			}
			break;
		}
		throw new \Exception("Method not found!");
	}

}
new Merge;
