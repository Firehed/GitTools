#!/usr/bin/php
<?php

namespace Firehed\GitTools;
ini_set('display_errors', 'STDOUT');
ini_set('error_reporting', -1);

if (!ini_get('date.timezone')) {
	date_default_timezone_set('America/Los_Angeles');
}

// Borrowed from FB's libphutil for php<5.4 compat
function id($x) {
	return $x;
}

class Merge {

	private $from = 'master';
	private $avail = array();
	private $currentBranch;
	private $toMerge = array();

	private function loadAvail() {
		// "git cherry destination source"
		$cmd = "git cherry %s %s";
		$out = $this->exec($cmd, $this->currentBranch, $this->from);
		foreach ($out as $line) {
			list($symbol, $hash) = explode(' ', $line);
			if ($symbol == '+') {
				$this->avail[$hash] = $hash;
			}
		}
	}

	private function getDescription($hash) {
		// Format derived from 'git help show', "format" section
		$format = '%H%n'
			. '%an%n'
			. '%ae%n'
			. '%at%n'
			. '%cn%n'
			. '%ce%n'
			. '%ct%n'
			. '%s%n'
			. '%b';
		$cmd = "git show %s --pretty=format:%s -s";
		$out = $this->exec($cmd, $hash, $format);
		list($hash
		   , $authorName
		   , $authorEmail
		   , $authorTimestamp
		   , $commiterName
		   , $committerEmail
		   , $committerTimestamp
		   , $summary
		   ) = $out;
		$out = array_slice($out, 8);
		$body = implode("\n", $out);

		return id(new Commit)
			->setHash($hash)
			->setAuthorName($authorName)
			->setAuthorEmail($authorEmail)
			->setAuthorTimestamp($authorTimestamp)
			->setCommiterName($commiterName)
			->setCommitterEmail($commiterName)
			->setCommitterTimestamp($commiterName)
			->setSummary($summary)
			->setBody($body)
			;
	}


	function __construct() { 
		$this->determineCurrentBranch();
		$this->displaySanityWarning();
		$this->run();
	}

	private function determineCurrentBranch() {
		foreach ($this->exec('git branch') as $branch) {
			if (0 === strpos($branch, '*')) {
				$this->currentBranch = substr($branch, 2);
				break;
			}
		}
		if (!$this->currentBranch || '(no branch)' == $this->currentBranch) {
			throw new \Exception("Could not detect current branch");
		}
	}

	private function displaySanityWarning() {
		if ($behind = count($this->exec("git rev-list refs/remotes/origin/%s...%s"
			, $this->currentBranch
			, 'HEAD'
		))) {
			echo "Warning: you are $behind commits behind HEAD! Maybe 'git pull' first?\n";
		}
		if ('master' == $this->currentBranch) {
			echo "You currently have master checked out. This tool only supports merging FROM master right now.\n";
			exit;
		}
	}

	private function help($exit = 0) {
		echo "Usage: todo\n";
		exit($exit);
	}

	private function displayAvail() {
		$this->loadAvail();
		foreach ($this->avail as $hash) {
			$commit = $this->getDescription($hash);
			echo $commit->asOneLine() . "\n";
		}
	}

	private function run() {
		// not using getopt() because it handles out-of-order args poorly
		if ($_SERVER['argc'] < 2) {
			$this->help(1);
		}
		$cmd = $_SERVER['argv'][1];
		switch (strtolower($cmd)) {
			case 'avail':
				$this->displayAvail();
				break;
			case 'merge':
				$this->performMerge();
				break;
			default:
				$this->help(1);
				break;
		}
	}

	private function performMerge() {
		$this->loadAvail();
		foreach ($this->avail as $hash) {
			$commit = $this->getDescription($hash);
			echo $commit->asOneLine() . "\n";
			switch ($this->prompt("Merge?", array('y','n','q'), 'n')) {
			case 'y':
				$this->toMerge[$hash] = $commit;
				break;
			case 'n':
				break; // do nothing
			case 'q':
				break 2; // stop prompting entirely
			}
		}
		if ($this->toMerge) {
			echo "The following changes will be merged: \n";
			foreach ($this->toMerge as $hash => $commit) {
				echo $commit->asOneLine() . "\n";
			}
			switch ($this->prompt("Merge those revisions?", array('y', 'n'), 'n')) {
			case 'y':
				foreach ($this->toMerge as $commit) {
					$this->exec('git cherry-pick %s', $commit->getHash());
				}
				echo "Revisions have been merged and committed. You should probably push.\n";
				break;
			case 'n':
				echo "Merge aborted!\n";
				break;
			}
		}
	}

	private function prompt($msg, array $opts, $default) {
		do {
			echo $msg . ' [' . implode('/', $opts) . '] ';
			$answer = strtolower(trim(fgets(STDIN)));
			if (!$answer) return $default;
			if (in_array($answer, $opts)) {
				return $answer;
			} else {
				echo "Invalid option. ";
			}
		} while (true);
	}


	private function exec($cmd) {
		$args = func_get_args();
		array_shift($args);
		array_walk($args, function(&$v, $k) { $v = escapeshellarg($v); });
		if ($args) {
			$cmd = vsprintf($cmd, $args);
		}
		exec($cmd, $out, $err);
		if ($err) {
			throw new \Exception(sprintf("Command %s failed with result %s", $cmd, print_r($out, true)), $err);
		}
		return $out;
	}

}

class Commit {
	private $Hash;
	private $AuthorName;
	private $AuthorEmail;
	private $AuthorTimestamp;
	private $CommiterName;
	private $CommitterEmail;
	private $CommitterTimestamp;
	private $Summary;
	private $Body;
	
	public function __construct() {
		// no-op
	}

	public function asOneLine() {
		return sprintf("%s * %s %s <%s> - %s"
			, $this->getHash()
			, date('c', $this->getAuthorTimestamp())
			, $this->getAuthorName()
			, $this->getAuthorEmail()
			, $this->getSummary()
		);
	}

	public function __call($fn, $args) {
		switch (strtolower(substr($fn, 0, 3))) {
		case 'get':
			$key = substr($fn, 3);
			if (property_exists($this, $key)) {
				return $this->$key;
			}
			break;
		case 'set':
			$key = substr($fn, 3);
			if (property_exists($this, $key)) {
				$this->$key = $args[0];
				return $this;
			}
			break;
		}
		throw new \Exception("Method not found!");
	}

}

new Merge;

